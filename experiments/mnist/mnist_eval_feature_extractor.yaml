name: mnist
experiment: 
    dataset: &dataset
      __object__: src.explib.datasets.MnistSplit
      digit: 3
      flatten: false
    model_cfg: 
      type:
        __class__: &model src.nf4ad.flows.FeatureFlow 
      params:
          flow:
            __object__: &flow src.veriflow.flows.NiceFlow 
            soft_training: true
            training_noise_prior:
              __object__: pyro.distributions.Uniform
              low: 0.0
              high: 1.0
              # FIXME: these values don't work for the pyro Uniform distribution
              # loc: 0.0
              # scale: 0.001
            prior_scale: 1.0
            coupling_layers: &coupling_layers 4
              #__eval__: tune.choice([4])
            coupling_nn_layers: &coupling_nn_layers [100, 100]
              #__eval__: "tune.choice([[w] * l for w in range(100, 201, 100) for l in range(1, 4)])" # tune.choice([[c*32, c*16, c*8, c*16, c*32] for c in [1, 2, 3, 4]] + [[c*64, c*32, c*64]  for c in range(1,5)] + [[c*128] * 2 for c in range(1,5)] + [[c*256] for c in range(1,5)])
            nonlinearity: &nonlinearity  
              __eval__: torch.nn.ReLU() #tune.choice([torch.nn.ReLU()])
            split_dim: &split_dim 50
              #__eval__: tune.choice([50])
            base_distribution: 
              __object__: pyro.distributions.Normal
              loc: 
                __eval__: torch.zeros(32)
              scale: 
                __eval__: torch.ones(32)
            use_lu: true
          feature_encoder_ckpt: &feature_encoder /Users/giorgiapitteri/Downloads/model.tar

