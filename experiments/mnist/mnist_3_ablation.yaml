# ---
# TODO change loc in p norm of radial distribution (increase loc and lower scale)
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_rad_logN
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_3_radial_logN
    device: &device cpu
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 5
    gpus_per_trial: &gpus_per_trial 1
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      device: *device
      logging:
        images: true
        "image_shape": [28, 28]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 3
        device: *device
      epochs: &epochs 200000
      patience: &patience 50
      batch_size: &batch_size 
        __eval__: tune.choice([128])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(1e-6, 1e-2)
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.veriflow.flows.NiceFlow
        params:
          soft_training: true
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-20 * torch.ones(1).to("cpu") #1e-20
            high:  
              __eval__: 0.01 * torch.ones(1).to("cpu") #0.01
          prior_scale: 1.0
          coupling_layers: 10
          coupling_nn_layers: [300, 300, 300] 
          nonlinearity: &nonlinearity 
            __eval__: torch.nn.ReLU() #tune.choice([torch.nn.ReLU()])
          split_dim: 392
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: *device
            p: 1.0
            loc: 
              __eval__: torch.zeros(784).to("cpu")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: torch.zeros(1).to("cpu")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cpu")
          use_lu: true
  - &exp_rad_logN_p_2
    __overwrites__: *exp_rad_logN
    name: mnist_3_radial_logN_p_2
    trial_config:
      model_cfg: 
        params:
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: *device
            p: 2.0
            loc: 
              __eval__: torch.zeros(784).to("cpu")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: torch.zeros(1).to("cpu")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cpu")
  - &exp_rad_logN_p_inf
    __overwrites__: *exp_rad_logN
    name: mnist_3_radial_logN_p_inf
    trial_config:
      model_cfg: 
        params:
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: *device
            p: .inf
            loc: 
              __eval__: torch.zeros(784).to("cpu")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: torch.zeros(1).to("cpu")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cpu")
  - &exp_rad_logN_p_1_loc_2
    __overwrites__: *exp_rad_logN
    name: mnist_3_radial_logN_p_1_loc_2
    trial_config:
      model_cfg: 
        params:
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: *device
            p: 1.0
            loc: 
              __eval__: torch.zeros(784).to("cpu")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: (2 * torch.ones(1)).to("cpu")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cpu")
  - &exp_rad_logN_p_1_loc_3
    __overwrites__: *exp_rad_logN
    name: mnist_3_radial_logN_p_1_loc_3
    trial_config:
      model_cfg: 
        params:
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: *device
            p: 1.0
            loc: 
              __eval__: torch.zeros(784).to("cpu")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: (3 * torch.ones(1)).to("cpu")
              scale: 
                __eval__: (torch.ones(1)).to("cpu")
  - &exp_laplace
      __overwrites__: *exp_rad_logN
      name: mnist_3_laplace
      trial_config:
        model_cfg: 
            params:
              base_distribution:
                __exact__: 
                  __object__: pyro.distributions.Laplace
                  loc: 
                    __eval__: torch.zeros(784).to("cpu")
                  scale: 
                    __eval__: torch.ones(784).to("cpu")
  - &exp_normal
    __overwrites__: *exp_rad_logN
    name: mnist_3_normal
    trial_config:
      model_cfg: 
          params:
            base_distribution:
              __exact__: 
                __object__: pyro.distributions.Normal
                loc: 
                  __eval__: torch.zeros(784).to("cpu")
                scale: 
                  __eval__: torch.ones(784).to("cpu")
