# ---
__object__: src.explib.base.ExperimentCollection
name: mnist_featureflow
experiments:
  - &exp_rad_logN
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_3_radial_logN
    device: cuda
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 1
    gpus_per_trial: &gpus_per_trial 1
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      logging:
        images: false # TODO: img_sample doesn't work so far with feat encoder. We need to modify the code
        "image_shape": [28, 28]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 3
      epochs: &epochs 200000
      patience: &patience 5 # maybe even more?
      batch_size: &batch_size 
        __eval__: tune.choice([32])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: 1e-4
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.nf4ad.flows.FeatureFlow 
        params:
            flow:
              __object__: &flow src.veriflow.flows.NiceFlow 
              soft_training: true
              training_noise_prior:
                __object__: pyro.distributions.Uniform
                low: 
                  __eval__: 1e-20
                high: 0.01
 
              prior_scale: 1.10
              coupling_layers: &coupling_layers 10 
              coupling_nn_layers: &coupling_nn_layers [300, 300, 300] 
              nonlinearity: &nonlinearity  
                __eval__: torch.nn.ReLU()
              split_dim: &split_dim 392
              base_distribution: 
                __object__: src.veriflow.distributions.RadialDistribution       
                device: cuda
                p: 1.0
                loc: 
                  __eval__: torch.zeros(32).to("cuda")
                norm_distribution:
                  __object__: pyro.distributions.LogNormal
                  loc: 
                    __eval__: torch.zeros(1).to("cuda")
                  scale: 
                    __eval__: (.5 * torch.ones(1)).to("cuda")
              use_lu: true

            pretrained_feature_encoder: &pretrained_feature_encoder /home/giorgia/nf4ad/data/pretrained/feature_encoder/model.tar

       
