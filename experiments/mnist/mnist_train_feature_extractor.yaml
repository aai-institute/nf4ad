---
__object__: src.explib.base.ExperimentCollection
name: mnist
experiments:
  - &exp_mnist
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_nice_lu_laplace
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 1
    gpus_per_trial: &gpus_per_trial 0
    cpus_per_trial: &cpus_per_trial 8
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      logging:
        images: false #FIXME: put to false because needs to be changed if using the feature encoder
        "image_shape": [28, 28]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 3
        flatten: false
      epochs: &epochs 200000
      patience: &patience 10
      batch_size: &batch_size 32
        #__eval__: tune.choice([32])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(1e-5, 1e-3)
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.nf4ad.flows.FeatureFlow 
        params:
            flow:
              __object__: &flow src.veriflow.flows.NiceFlow 
              soft_training: true
              training_noise_prior:
                __object__: pyro.distributions.Uniform
                low: 0.0
                high: 1.0
                # FIXME: these values don't work for the pyro Uniform distribution
                # loc: 0.0
                # scale: 0.001
              prior_scale: 1.0
              coupling_layers: &coupling_layers 4
                #__eval__: tune.choice([4])
              coupling_nn_layers: &coupling_nn_layers [100, 100]
                #__eval__: "tune.choice([[w] * l for w in range(100, 201, 100) for l in range(1, 4)])" # tune.choice([[c*32, c*16, c*8, c*16, c*32] for c in [1, 2, 3, 4]] + [[c*64, c*32, c*64]  for c in range(1,5)] + [[c*128] * 2 for c in range(1,5)] + [[c*256] for c in range(1,5)])
              nonlinearity: &nonlinearity  
                __eval__: torch.nn.ReLU() #tune.choice([torch.nn.ReLU()])
              split_dim: &split_dim 50
                #__eval__: tune.choice([50])
              base_distribution: 
                __object__: pyro.distributions.Normal
                loc: 
                  __eval__: torch.zeros(32)
                scale: 
                  __eval__: torch.ones(32)
              use_lu: true

            feature_encoder_ckpt: &feature_encoder /Users/giorgiapitteri/Downloads/model.tar

       
