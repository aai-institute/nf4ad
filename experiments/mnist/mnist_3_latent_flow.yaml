# ---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_laplace
    __object__: src.explib.hyperopt_latent_flow.HyperoptExperiment
    name: mnist_3_laplace
    device: &device cuda
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 3
    gpus_per_trial: &gpus_per_trial 1
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      device: *device
      logging:
        images: true
        "image_shape": [28, 28]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 3
        device: *device
      epochs: &epochs 2 #200000
      patience: &patience 10
      batch_size: &batch_size 
        __eval__: tune.choice([128])
      optim_cfg: &optim 
        optimizer:
          type:
            __class__: pyro.optim.ClippedAdam # for latent flow the optimizer needs to be of pyro.optim.Optimizer class
          params:
            lr: 
              __eval__: tune.loguniform(1e-6, 1e-2)
            weight_decay: 0.0
      model_cfg: 
        type:
          __class__: &model nf4ad.flows.LatentFlow
        params:
          # encoder: "/home/giorgia/nf4ad/data/pretrained/pretrained_encoder.pt"
          # decoder: "/home/giorgia/nf4ad/data/pretrained/pretrained_decoder.pt"
          # mean_net: "/home/giorgia/nf4ad/data/pretrained/mean_net.pt"
          encoder: 
            type:
              __class__: &encoder nf4ad.flows.Encoder
            params:
              dim: 784
              z_dim: 784
              hidden_dims: [100, 100]
          decoder: 
            type:
              __class__: &decoder nf4ad.flows.Decoder
            params:
              dim: 784
              z_dim: 784
              hidden_dims: [100, 100]
          flow:
            type:
              __class__: &flow src.veriflow.flows.NiceFlow
            params:
              soft_training: true
              training_noise_prior:
                __object__: pyro.distributions.Uniform
                low: 
                  __eval__: 1e-20 * torch.ones(1).to("cuda")  
                high:  
                  __eval__: 0.01 * torch.ones(1).to("cuda")  
              prior_scale: 3.0 
              coupling_layers: &coupling_layers 
                __eval__: tune.choice([2, 3, 4, 5])
              coupling_nn_layers: &coupling_nn_layers 
                __eval__: tune.choice([[w]*l for l in [1, 2] for w in [10, 20, 50, 100, 200]]) # next run try these? : [50, 100, 200, 300]
              nonlinearity: &nonlinearity 
                __eval__: torch.nn.ReLU() #tune.choice([torch.nn.ReLU()])
              split_dim: 392
              base_distribution:
                #__exact__: 
                __object__: pyro.distributions.Laplace
                loc: 
                  __eval__: torch.zeros(784).to("cuda")
                scale: 
                  __eval__: torch.ones(784).to("cuda")
              use_lu: true
  - &exp_normal
    __overwrites__: *exp_laplace
    name: mnist_3_normal
    trial_config:
      model_cfg: 
          params:
            base_distribution:
              __exact__: 
                __object__: pyro.distributions.Normal
                loc: 
                  __eval__: torch.zeros(784).to("cuda")
                scale: 
                  __eval__: torch.ones(784).to("cuda")
  # - &exp_rad_logN_p_1
  #   __overwrites__: *exp_laplace
  #   name: mnist_3_radial_logN_p_1
  #   trial_config:
  #     model_cfg: 
  #       params:
  #         base_distribution: 
  #           __object__: src.veriflow.distributions.RadialDistribution       
  #           device: *device
  #           p: 1.0
  #           loc: 
  #             __eval__: torch.zeros(784).to("cuda")
  #           norm_distribution:
  #             __object__: pyro.distributions.LogNormal
  #             loc: 
  #               __eval__: torch.zeros(1).to("cuda")
  #             scale: 
  #               __eval__: (.5 * torch.ones(1)).to("cuda")
  # - &exp_rad_logN_p_2
  #   __overwrites__: *exp_rad_logN
  #   name: mnist_3_radial_logN_p_2
  #   trial_config:
  #     model_cfg: 
  #       params:
  #         base_distribution: 
  #           __object__: src.veriflow.distributions.RadialDistribution       
  #           device: *device
  #           p: 2.0
  #           loc: 
  #             __eval__: torch.zeros(784).to("cuda")
  #           norm_distribution:
  #             __object__: pyro.distributions.LogNormal
  #             loc: 
  #               __eval__: torch.zeros(1).to("cuda")
  #             scale: 
  #               __eval__: (.5 * torch.ones(1)).to("cuda")
  # - &exp_rad_logN_p_inf
  #   __overwrites__: *exp_rad_logN
  #   name: mnist_3_radial_logN_p_inf
  #   trial_config:
  #     model_cfg: 
  #       params:
  #         base_distribution: 
  #           __object__: src.veriflow.distributions.RadialDistribution       
  #           device: *device
  #           p: .inf
  #           loc: 
  #             __eval__: torch.zeros(784).to("cuda")
  #           norm_distribution:
  #             __object__: pyro.distributions.LogNormal
  #             loc: 
  #               __eval__: torch.zeros(1).to("cuda")
  #             scale: 
  #               __eval__: (.5 * torch.ones(1)).to("cuda")
  # - &exp_rad_logN_p_1_loc_2
  #   __overwrites__: *exp_rad_logN
  #   name: mnist_3_radial_logN_p_1_loc_2
  #   trial_config:
  #     model_cfg: 
  #       params:
  #         base_distribution: 
  #           __object__: src.veriflow.distributions.RadialDistribution       
  #           device: *device
  #           p: 1.0
  #           loc: 
  #             __eval__: torch.zeros(784).to("cuda")
  #           norm_distribution:
  #             __object__: pyro.distributions.LogNormal
  #             loc: 
  #               __eval__: (2 * torch.ones(1)).to("cuda")
  #             scale: 
  #               __eval__: (.5 * torch.ones(1)).to("cuda")
  # - &exp_rad_logN_p_1_loc_3
  #   __overwrites__: *exp_rad_logN
  #   name: mnist_3_radial_logN_p_1_loc_3
  #   trial_config:
  #     model_cfg: 
  #       params:
  #         base_distribution: 
  #           __object__: src.veriflow.distributions.RadialDistribution       
  #           device: *device
  #           p: 1.0
  #           loc: 
  #             __eval__: torch.zeros(784).to("cuda")
  #           norm_distribution:
  #             __object__: pyro.distributions.LogNormal
  #             loc: 
  #               __eval__: (3 * torch.ones(1)).to("cuda")
  #             scale: 
  #               __eval__: (torch.ones(1)).to("cuda")
